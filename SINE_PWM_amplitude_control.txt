/*
 * main.c
 *
 *  Created on: 27-Sep-2022
 *      Author: Rajashree
 */

/*
 * PWM INTIALIZATION
 */
#include <stdint.h>
#include <avr/interrupt.h>
#include <avr/io.h>// Contains all the I/O Register Macros
#include <avr/pgmspace.h>
#include<math.h>
#include<stdio.h>
#include<stdlib.h>
//interrupt ISR frequency should be 12.75KHz or 78.43us is the period
#define PORTx      PORTD
uint8_t sine_phase1[]={0X7F	,0X84	,0X89	,0X8E	,0X93	,0X98	,0X9D	,0XA2	,0XA7	,0XAC	,0XB1	,0XB5	,0XBA	,0XBE	,0XC3	,0XC7
		,0XCB	,0XCF	,0XD3	,0XD7	,0XDB	,0XDE	,0XE1	,0XE5	,0XE8	,0XEA	,0XED	,0XEF	,0XF2	,0XF4	,0XF6	,0XF7	,0XF9	,0XFA
		,0XFB	,0XFC	,0XFD	,0XFE	,0XFE	,0XFE	,0XFE	,0XFE	,0XFD	,0XFC	,0XFB	,0XFA	,0XF9	,0XF7	,0XF6	,0XF4	,0XF2	,0XEF
		,0XED   ,0XEA	,0XE8	,0XE5	,0XE1	,0XDE	,0XDB	,0XD7	,0XD3	,0XCF	,0XCB	,0XC7	,0XC3	,0XBF	,0XBA	,0XB5	,0XB1	,0XAC
		,0XA7   ,0XA2	,0X9D	,0X98	,0X93	,0X8E	,0X89	,0X84	,0X7F	,0X7A	,0X75	,0X70	,0X6B	,0X66	,0X61	,0X5C	,0X57	,0X52
		,0X4D	,0X49	,0X44	,0X40	,0X3B	,0X37	,0X33	,0X2F	,0X2B	,0X27	,0X23	,0X20	,0X1D	,0X19	,0X16	,0X14	,0X11	,0X0F
		,0X0C	,0X0A	,0X8	,0X7	,0X5	,0X4	,0X3	,0X2	,0X1	,0X0	,0X0	,0X0	,0X0	,0X0	,0X1	,0X2	,0X3	,0X4
		,0X5	,0X7	,0X8	,0X0A	,0X0C	,0X0F	,0X11	,0X14	,0X16	,0X19	,0X1D	,0X20	,0X23	,0X27	,0X2B	,0X2F	,0X33	,0X37
		,0X3B	,0X3F	,0X44	,0X49	,0X4D	,0X52	,0X57	,0X5C	,0X61	,0X66	,0X6B	,0X70	,0X75	,0X7A};
const length=sizeof(sine_phase1);uint8_t k1=0,k2=53,k3=105;float amp;
void PWM_init ()
 {
	    DDRD |= _BV(PD6) |_BV(PD5)|_BV(PD3)|_BV(PD2)|_BV(PD7)|_BV(PD4);
 		DDRB |= _BV(PB2);
 		PORTD |= (1<<PORTD4) | (1<<PORTD7);

 		//TIMER2  fast PWM Mode
 		TCCR2B  = (0<<CS20)|(1<<CS21)|(0<<CS22);//N=8 F=7.8KHZ
 		TCCR2A =_BV(COM2B1)|_BV(WGM20)|_BV(WGM21);//
 		//TIMER 0 fast PWM Mode
 		TCCR0B = (0<<CS00)|(1<<CS01)|(0<<CS02);//N=8
 		TCCR0A = _BV(WGM00)|_BV(WGM01)|_BV(COM0B1)|_BV(COM0A1);//not sure about why setting COM0A1 and COM0A0 works
 		//TIMER1 ISR fISR = 7.8khz fast PWM mode
 		TCCR1B =_BV(CS11)|_BV(WGM12);
 		TCCR1A =_BV(COM1B0)|_BV(COM1B1)|_BV(WGM10);//Toggle on Comp match
 		int x=1;
 		TIMSK1 =(x<<OCIE1B);
 		sei();
 		OCR1B = 0X7C;//PWM 1 YELLOW
 		OCR1A = 0X7C;
}
/*
 * UART INTIALIZATION
 */
#define F_CPU 16000000UL // Defining the CPU Frequency
#include <util/delay.h>  // Generates a Blocking Delay
#include <avr/interrupt.h>
#include <stdbool.h>
#define USART_BAUDRATE 9600 // Desired Baud Rate
#define BAUD_PRESCALER (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)
#define ASYNCHRONOUS (0<<UMSEL00) // USART Mode Selection
#define DISABLED    (0<<UPM00)
#define EVEN_PARITY (2<<UPM00)
#define ODD_PARITY  (3<<UPM00)
#define PARITY_MODE  DISABLED // USART Parity Bit Selection
#define ONE_BIT (0<<USBS0)
#define TWO_BIT (1<<USBS0)
#define STOP_BIT ONE_BIT      // USART Stop Bit Selection
#define FIVE_BIT  (0<<UCSZ00)
#define SIX_BIT   (1<<UCSZ00)
#define SEVEN_BIT (2<<UCSZ00)
#define EIGHT_BIT (3<<UCSZ00)
#define DATA_BIT   EIGHT_BIT  // USART Data Bit Selection
void USART_Init()//initialization of USART
{
	// Set Baud Rate
	UBRR0H = BAUD_PRESCALER >> 8;
	UBRR0L = BAUD_PRESCALER;

	// Set Frame Format
	UCSR0C = ASYNCHRONOUS | PARITY_MODE | STOP_BIT | DATA_BIT;

	// Enable Receiver and Transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
}

uint8_t USART_ReceivePolling()//UART Receiving polling
{
	uint8_t DataByte;
	while (( UCSR0A & (1<<RXC0)) == 0) {}; // Do nothing until data have been received
	DataByte = UDR0 ;
	return DataByte;
}
void USART_TransmitPolling(uint8_t DataByte)//UART Transmitting function
{
	while (( UCSR0A & (1<<UDRE0)) == 0) {}; // Do nothing until UDR is ready
	UDR0 = DataByte;
}
int USART0SendByte(char u8Data, FILE *stream)//This UART Transmitting function is to use printf statements in the project for debugging
{
   if(u8Data == '\n')
   {
        USART0SendByte('\r', stream);
   }
//wait while previous byte is completed
while(!(UCSR0A&(1<<UDRE0))){};
// Transmit data
UDR0 = u8Data;
return 0;
}
//set stream pointer
FILE usart0_str = FDEV_SETUP_STREAM(USART0SendByte, NULL, _FDEV_SETUP_WRITE);
/*
 * UART INTIALIZATION COMPLETE
 */
int main()
{
	//UART
	USART_Init();
	stdout=&usart0_str;
	char LocalData;amp=0.5;
	//PWM
	PWM_init();
	while (1)
	{
		LocalData = USART_ReceivePolling();
		if(LocalData=='9')
			amp=0.9;
		if(LocalData=='7')
			amp=0.7;
		if(LocalData=='5')
			amp=0.5;
		if(LocalData=='3')
			amp=0.3;
		if(LocalData=='1')
			amp=0.1;

		//printf("amp = %f \n",amp);
		//_delay_ms(3000);
		//USART_TransmitPolling(LocalData);
	}
	return 0;
}
ISR(TIMER1_COMPB_vect)//PWM2 RED **
{
	OCR2B=(sine_phase1[k1]*amp);//4096);//red
	OCR0A=(sine_phase1[k2]*amp);//4096);//Green
	OCR0B=(sine_phase1[k3]*amp);//4096);orange
	k1++;k2++;k3++;
	if(k1>=length)
		k1=0;
	if(k2>=length)
		k2=0;
	if(k3>=length)
		k3=0;
}
